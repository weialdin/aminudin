{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, _toDisplayString($data.value), 1 /* TEXT */);\n}","map":{"version":3,"names":["_createElementBlock","_toDisplayString","$data","value"],"sources":["D:\\vue-project\\dizme\\node_modules\\vue-js-counter\\VueJsCounter.vue"],"sourcesContent":["<template>\r\n\t<div>\r\n\t\t{{value}}\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n\tname: \"VueJsCounter\",\r\n\tprops:{\r\n\t\tstart: {default:0},\r\n\t\tend: {default:0},\r\n\t\tduration: {default:2000},\r\n\t\tthousand: {type: String, default:\".\"}, // thousand seperator\r\n\t\tdecimal: {type: String, default:\",\"} // decimal seperator\r\n\t},\r\n\tdata(){\r\n\t\treturn{\r\n\t\t\tstartData: null,\r\n\t\t\tendData: null,\r\n\t\t\tdurationData: null,\r\n\t\t\tnumberToSum: null,\r\n\t\t\tvalue: null\r\n\t\t}\r\n\t},\r\n\tmethods:{\r\n\t\tnumberWithCommas(value,thousand){\r\n\t\t\treturn value.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, thousand);\r\n\t\t}\r\n\t},\r\n\tcreated(){\r\n\t\tthis.startData = parseInt(this.start)\r\n\t\tthis.endData = parseInt(this.end)\r\n\t\tthis.durationData = parseInt(this.duration)\r\n\r\n\t\tif(this.startData == this.endData){\r\n\t\t\tthis.value = this.startData\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst frameDuration = 1000 / 60;\r\n\t\t\tconst totalFrames = Math.round( this.duration / frameDuration );\r\n\t\t\tconst easeOutQuad = t => t * ( 2 - t );\r\n\t\t\tlet increasing = true\r\n\t\t\tif(this.startData>this.endData){this.endData == undefined ? this.endData = 0 : this.endData}\r\n\t\t\telse{\r\n\t\t\t\tincreasing=false\r\n\t\t\t\tthis.startData == undefined ? this.startData = 0 : this.startData\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet frame = 0;\r\n\t\t\tconst countTo = this.endData - this.startData\r\n\t\t\tif(countTo<0){countTo * -1}\r\n\t\t\tconst counter = setInterval( () => {\r\n\t\t\t\tframe++;\r\n\t\t\t\tconst progress = easeOutQuad( frame / totalFrames )\r\n\t\t\t\tconst currentCount = Math.round( countTo * progress )\r\n\t\t\t\tif ( parseInt( this.value, 10 ) !== currentCount ) {\r\n\t\t\t\t\tthis.value = this.numberWithCommas(increasing ? this.startData + currentCount : this.startData + currentCount , this.thousand)\r\n\t\t\t\t}\r\n\t\t\t\tif (frame === totalFrames) clearInterval( counter )\r\n\t\t\t}, frameDuration )\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n</script>"],"mappings":";;uBACCA,mBAAA,CAEM,aAAAC,gBAAA,CADHC,KAAA,CAAAC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}